name: Deploy to DigitalOcean Droplet (Dev/Adhoc)

on:
  push:
    branches:
      - dev

  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'dev'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.branch || github.ref_name }}

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Set environment variables
      run: |
        if [ "${{ github.event.inputs.branch || github.ref_name }}" == "dev" ]; then
          echo "Using development environment"
          echo "POSTGRES_HOST=db" >> .env
          echo "POSTGRES_DB=${{ secrets.DEV_POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.DEV_POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.DEV_POSTGRES_PASSWORD }}" >> .env
          echo "CIABOT_TOKEN=${{ secrets.CIABOT_TOKEN_DEV }}" >> .env
          echo "CIABOT_SETTINGS_PATH=${{ secrets.CIABOT_SETTINGS_PATH }}" >> .env
          echo "CIABOT_ADMIN_ID=${{ secrets.CIABOT_ADMIN_ID }}" >> .env
          echo "CIABOT_GUILD_ID=${{ secrets.CIABOT_GUILD_ID }}" >> .env
          echo "LOG_DESTINATION=${{ secrets.PAPERTRAIL_LOG_DESTINATION_DEV }}" >> .env
          echo "LOG_PORT=${{ secrets.PAPERTRAIL_LOG_PORT_DEV }}" >> .env
          echo "CIABOT_CONTAINER_NAME=ciabot_public_dev" >> .env
          echo "POSTGRES_CONTAINER_NAME=ciabot_postgres_dev" >> .env
          echo "CIABOT_NETWORK_PORT=5435" >> .env
          echo "CIABOT_PORT=83" >> .env
          echo "DEPLOY_PATH=/root/ciabot-public-dev" >> .env
          echo "CIABOT_NETWORK_NAME=ciabot_network_dev" >> .env
          echo "COMPOSE_FILE=docker-compose.dev.yml" >> .env
          
          echo "DEPLOY_PATH=/root/ciabot-public-dev" >> $GITHUB_ENV
          echo "CIABOT_NETWORK_NAME=ciabot_network-dev" >> $GITHUB_ENV
          echo "COMPOSE_FILE=docker-compose.dev.yml" >> $GITHUB_ENV
    
        else
          echo "Using adhoc environment"
          echo "POSTGRES_HOST=db" >> .env
          echo "CIABOT_SETTINGS_PATH=${{ secrets.CIABOT_SETTINGS_PATH }}" >> .env
          echo "CIABOT_ADMIN_ID=${{ secrets.CIABOT_ADMIN_ID }}" >> .env
          echo "CIABOT_GUILD_ID=${{ secrets.CIABOT_GUILD_ID }}" >> .env
          echo "POSTGRES_DB=${{ secrets.ADHOC_POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.ADHOC_POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.ADHOC_POSTGRES_PASSWORD }}" >> .env
          echo "CIABOT_TOKEN=${{ secrets.CIABOT_TOKEN_ADHOC }}" >> .env
          echo "LOG_DESTINATION=${{ secrets.PAPERTRAIL_LOG_DESTINATION_ADHOC }}" >> .env
          echo "LOG_PORT=${{ secrets.PAPERTRAIL_LOG_PORT_ADHOC }}" >> .env
          echo "CIABOT_CONTAINER_NAME=ciabot_public_adhoc" >> .env
          echo "POSTGRES_CONTAINER_NAME=ciabot_postgres_adhoc" >> .env
          echo "CIABOT_NETWORK_PORT=5434" >> .env
          echo "CIABOT_PORT=82" >> .env
          echo "DEPLOY_PATH=/root/ciabot-public-adhoc" >> .env
          echo "CIABOT_NETWORK_NAME=ciabot_network_adhoc" >> .env
          echo "COMPOSE_FILE=docker-compose.adhoc.yml" >> .env

          echo "DEPLOY_PATH=/root/ciabot-public-adhoc" >> $GITHUB_ENV
          echo "CIABOT_NETWORK_NAME=ciabot_network_adhoc" >> $GITHUB_ENV
          echo "COMPOSE_FILE=docker-compose.adhoc.yml" >> $GITHUB_ENV
        fi
        
    - name: Create Docker Network if not exists
      run: |
        if ! docker network ls --format '{{.Name}}' | grep -w "${CIABOT_NETWORK_NAME}"; then
          echo "Creating network ${CIABOT_NETWORK_NAME}"
          docker network create ${CIABOT_NETWORK_NAME}
        else
          echo "Network ${CIABOT_NETWORK_NAME} already exists"
        fi

    - name: Build Docker image
      run: docker compose --env-file .env -f ${{ env.COMPOSE_FILE }} build

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DO_SSH_KEY }}

    - name: Deploy to DigitalOcean Droplet
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} \
        "docker compose -f ${{ env.COMPOSE_FILE }} down || true"
        
        scp -o StrictHostKeyChecking=no -r * .env ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:${{ env.DEPLOY_PATH }}
        
        ssh -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} \
        "cd ${{ env.DEPLOY_PATH }} && docker compose --env-file .env -f ${{ env.COMPOSE_FILE }} up -d --build"
